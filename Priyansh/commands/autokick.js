const fs = require("fs");
const path = require("path");

module.exports.config = {
  name: "autokick",
  version: "2.0.0",
  hasPermission: 2,
  credits: "Modified by ChatGPT",
  description: "Auto kick user when bad words are used, with warning system and admin exception",
  commandCategory: "Admin",
  usages: "[list/add/remove] [word]",
  cooldowns: 5,
};

const badWordsPath = path.join(__dirname, "autokick_badwords.json");
const warnedUsersPath = path.join(__dirname, "autokick_warned.json");
const adminUIDs = ["100067984247525"]; // ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶á UID ‡¶ï‡ßá ‡¶ï‡¶ø‡¶ï ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡ßá‡¶¨‡ßá

// Helper Functions
function loadJSON(file) {
  try {
    return JSON.parse(fs.readFileSync(file, "utf8"));
  } catch {
    return {};
  }
}

function saveJSON(file, data) {
  fs.writeFileSync(file, JSON.stringify(data, null, 2));
}

module.exports.handleEvent = async function ({ api, event }) {
  const { threadID, senderID, body } = event;
  if (!body) return;

  const message = body.toLowerCase();
  const badWordsData = loadJSON(badWordsPath);
  const warnedData = loadJSON(warnedUsersPath);
  const matched = badWordsData.badWords?.some(word => message.includes(word));

  if (matched) {
    // ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶π‡¶Ø‡¶º
    if (adminUIDs.includes(senderID.toString())) {
      return api.sendMessage("‡¶õ‡¶ø ‡¶â‡¶∏‡ßç‡¶§‡¶æ‡¶¶, ‡¶Ö‡¶®‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡ßá ‡¶®‡¶ø‡¶∑‡¶ø‡¶¶‡ßç‡¶ß ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá‡¶õ‡ßá‡¶®,,,,üòûüòûüòû", threadID, event.messageID);
    }

    const warns = warnedData[senderID] || 0;

    if (warns === 0) {
      warnedData[senderID] = 1;
      saveJSON(warnedUsersPath, warnedData);
      return api.sendMessage(`‚ö†Ô∏è @${senderID}, ‡¶®‡¶ø‡¶∑‡¶ø‡¶¶‡ßç‡¶ß ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®! ‡¶™‡¶∞‡ßá‡¶∞ ‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá!`, threadID, null, [senderID]);
    } else {
      try {
        await api.removeUserFromGroup(senderID, threadID);
        delete warnedData[senderID];
        saveJSON(warnedUsersPath, warnedData);
        return api.sendMessage(`‚ùå @${senderID} ‡¶ï‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶∑‡¶ø‡¶¶‡ßç‡¶ß ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§`, threadID);
      } catch {
        return api.sendMessage("‚ùå ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶∏‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡•§", threadID);
      }
    }
  }
};

module.exports.run = async function ({ api, event, args }) {
  const { threadID, senderID } = event;
  if (!adminUIDs.includes(senderID.toString())) {
    return api.sendMessage("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶∞‡¶æ‡¶ñ‡ßá‡¶® ‡¶®‡¶æ‡•§", threadID);
  }

  const badWordsData = loadJSON(badWordsPath);

  if (args[0] === "list") {
    const list = badWordsData.badWords || [];
    return api.sendMessage(`üìõ ‡¶®‡¶ø‡¶∑‡¶ø‡¶¶‡ßç‡¶ß ‡¶∂‡¶¨‡ßç‡¶¶‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:\n${list.join(", ") || "‡¶ï‡ßã‡¶®‡ßã ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶®‡ßá‡¶á‡•§"}`, threadID);
  }

  if (args[0] === "add" && args[1]) {
    if (!badWordsData.badWords) badWordsData.badWords = [];
    badWordsData.badWords.push(args[1].toLowerCase());
    saveJSON(badWordsPath, badWordsData);
    return api.sendMessage(`‚úÖ ‡¶∂‡¶¨‡ßç‡¶¶ "${args[1]}" ‡¶®‡¶ø‡¶∑‡¶ø‡¶¶‡ßç‡¶ß ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡¶Ø‡¶º ‡¶Ø‡ßã‡¶ó ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§`, threadID);
  }

  if (args[0] === "remove" && args[1]) {
    if (!badWordsData.badWords) return api.sendMessage("‚ùå ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡¶Ø‡¶º ‡¶ï‡ßã‡¶®‡ßã ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶®‡ßá‡¶á‡•§", threadID);
    badWordsData.badWords = badWordsData.badWords.filter(word => word !== args[1].toLowerCase());
    saveJSON(badWordsPath, badWordsData);
    return api.sendMessage(`‚ùå ‡¶∂‡¶¨‡ßç‡¶¶ "${args[1]}" ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§`, threadID);
  }

  return api.sendMessage("‚ùì ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:\n‚Ä¢ autokick list\n‚Ä¢ autokick add <word>\n‚Ä¢ autokick remove <word>", threadID);
};
