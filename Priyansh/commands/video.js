const fetch = require("node-fetch");
const axios = require("axios");
const fs = require("fs");
const path = require("path");
const ytSearch = require("yt-search");
const https = require("https");
const http = require("http");  // http ржкрзНрж░рзЛржЯрзЛржХрж▓ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛рж░ ржЬржирзНржп ржирждрзБржи ржХрж░рзЗ ржПржЗ рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржпрзЛржЧ ржХрж░рж╛ рж╣рж▓рзЛ

module.exports = {
  config: {
    name: "video",
    version: "1.0.3",
    hasPermssion: 0,
    credits: "ЁЭРПЁЭРлЁЭРвЁЭР▓ЁЭРЪЁЭРзЁЭРмЁЭРб ЁЭРСЁЭРЪЁЭРгЁЭРйЁЭРоЁЭРн",
    description: "Download YouTube song from keyword search and link",
    commandCategory: "Media",
    usages: "[songName] [type]",
    cooldowns: 5,
    dependencies: {
      "node-fetch": "",
      "yt-search": "",
    },
  },

  run: async function ({ api, event, args }) {
    let songName, type;

    // ржкрзНрж░ржержорзЗ song name ржПржмржВ type (audio/video) ржмрзЗрж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
    if (
      args.length > 1 &&
      (args[args.length - 1] === "audio" || args[args.length - 1] === "video")
    ) {
      type = args.pop();  // type audio/video рж╣рждрзЗ ржкрж╛рж░рзЗ
      songName = args.join(" ");
    } else {
      songName = args.join(" ");
      type = "video";  // ржпржжрж┐ type ржирж╛ ржжрзЗрзЯрж╛ ржерж╛ржХрзЗ, default video рж╣ржмрзЗ
    }

    // Processing message ржкрж╛ржарж╛ржирзЛ
    const processingMessage = await api.sendMessage(
      "тЬЕ Processing your request. Please wait...",
      event.threadID,
      null,
      event.messageID
    );

    try {
      // YouTube ржП ржЧрж╛ржиржЯрж┐ ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ
      const searchResults = await ytSearch(songName);
      if (!searchResults || !searchResults.videos.length) {
        throw new Error("No results found for your search query.");
      }

      // рж╢рзАрж░рзНрж╖ ржлрж▓рж╛ржлрж▓ ржерзЗржХрзЗ ржнрж┐ржбрж┐ржУ ржЖржЗржбрж┐ ржирзЗрзЯрж╛ рж╣ржЪрзНржЫрзЗ
      const topResult = searchResults.videos[0];
      const videoId = topResult.videoId;

      // API URL рждрзИрж░рзА ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ ржбрж╛ржЙржирж▓рзЛржбрзЗрж░ ржЬржирзНржп
      const apiKey = "priyansh-here";
      const apiUrl = `https://priyansh-ai.onrender.com/youtube?id=${videoId}&type=${type}&apikey=${apiKey}`;

      api.setMessageReaction("тМЫ", event.messageID, () => {}, true);

      // API ржерзЗржХрзЗ ржбрж╛ржЙржирж▓рзЛржб рж▓рж┐ржВржХ ржкрж╛ржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
      const downloadResponse = await axios.get(apiUrl);
      const downloadUrl = downloadResponse.data.downloadUrl;

      // ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржо рждрзИрж░рзА ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      const safeTitle = topResult.title.replace(/[^a-zA-Z0-9 \-_]/g, ""); // ржЧрж╛ржи ржмрж╛ ржнрж┐ржбрж┐ржУ ржЯрж╛ржЗржЯрзЗрж▓ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      const filename = `${safeTitle}.${type === "audio" ? "mp3" : "mp4"}`;
      const downloadDir = path.join(__dirname, "cache");
      const downloadPath = path.join(downloadDir, filename);

      // ржбрж╛ржЙржирж▓рзЛржб ржлрзЛрж▓рзНржбрж╛рж░ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      if (!fs.existsSync(downloadDir)) {
        fs.mkdirSync(downloadDir, { recursive: true });
      }

      // ржбрж╛ржЙржирж▓рзЛржб ржлрж╛ржЗрж▓ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ
      const file = fs.createWriteStream(downloadPath);

      await new Promise((resolve, reject) => {
        // ржПржЦрж╛ржирзЗ http ржПржмржВ https ржкрзНрж░рзЛржЯрзЛржХрж▓ рж╕рж╛ржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
        const client = downloadUrl.startsWith("https") ? https : http;  // ржпржжрж┐ https ржерж╛ржХрзЗ рждржмрзЗ https ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗ, ржЕржирзНржпржерж╛ржпрж╝ http

        client.get(downloadUrl, (response) => {
          if (response.statusCode === 200) {
            response.pipe(file);  // ржлрж╛ржЗрж▓ржЯрж┐ ржбрж╛ржЙржирж▓рзЛржб рж╣ржЪрзНржЫрзЗ
            file.on("finish", () => {
              file.close(resolve);  // ржбрж╛ржЙржирж▓рзЛржб рж╢рзЗрж╖ рж╣рж▓рзЗ ржлрж╛ржЗрж▓ржЯрж┐ ржмржирзНржз рж╣ржмрзЗ
            });
          } else {
            reject(
              new Error(`Failed to download file. Status code: ${response.statusCode}`)
            );
          }
        }).on("error", (error) => {
          fs.unlinkSync(downloadPath);  // ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ ржбрж╛ржЙржирж▓рзЛржб ржлрж╛ржЗрж▓ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржмрзЗ
          reject(new Error(`Error downloading file: ${error.message}`));
        });
      });

      api.setMessageReaction("тЬЕ", event.messageID, () => {}, true);

      // ржлрж╛ржЗрж▓ржЯрж┐ ржкрж╛ржарж┐рзЯрзЗ ржжрзЗрзЯрж╛ рж╣ржЪрзНржЫрзЗ
      await api.sendMessage(
        {
          attachment: fs.createReadStream(downloadPath),
          body: `ЁЯЦд Title: ${topResult.title}\n\n Here is your ${
            type === "audio" ? "audio" : "video"
          } ЁЯОз:`,
        },
        event.threadID,
        () => {
          fs.unlinkSync(downloadPath); // ржкрж╛ржарж╛ржирзЛрж░ ржкрж░ ржлрж╛ржЗрж▓ржЯрж┐ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржмрзЗ
          api.unsendMessage(processingMessage.messageID);  // ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ рж╢рзЗрж╖ рж╣рж▓рзЗ "processing" ржмрж╛рж░рзНрждрж╛ржЯрж┐ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржмрзЗ
        },
        event.messageID
      );
    } catch (error) {
      console.error(`Failed to download and send song: ${error.message}`);
      api.sendMessage(
        `Failed to download song: ${error.message}`,
        event.threadID,
        event.messageID
      );
    }
  },
};
