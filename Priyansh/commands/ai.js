const axios = require("axios");

module.exports.config = {
    name: "ai",
    version: "1.0.0",
    hasPermssion: 0,
    credits: "ùêèùê´ùê¢ùê≤ùêöùêßùê¨ùê° ùêëùêöùê£ùê©ùêÆùê≠",
    description: "BlackBoxAi by Priyansh",
    commandCategory: "ai",
    usages: "[ask]",
    cooldowns: 2,
    dependecies: {
        "axios": "1.4.0"
    }
};

module.exports.run = async function ({ api, event, args, Users }) {

  const { threadID, messageID } = event;
  const query = encodeURIComponent(args.join(" "));
  var name = await Users.getNameUser(event.senderID);

  // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá
  if (!args[0]) return api.sendMessage("Please type a message...", threadID, messageID);

  api.sendMessage("Searching for an answer, please wait...", threadID, messageID);

  try {
    // Reaction set ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    api.setMessageReaction("‚åõ", event.messageID, () => {}, true);

    // BlackBoxAi API ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶®‡¶ø‡ßü‡ßá ‡¶Ü‡¶∏‡¶æ
    const res = await axios.get(`https://priyansh-ai.onrender.com/api/blackboxai?query=${encodeURIComponent(query)}`);
    const data = res.data.priyansh;

    // ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶®‡¶æ ‡¶Ü‡¶∏‡¶≤‡ßá
    if (!data) {
      api.sendMessage("Sorry, I couldn't understand that. Please try again with another question.", event.threadID, event.messageID);
    } else {
      // AI ‡¶è‡¶∞ ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
      api.sendMessage(data, event.threadID, event.messageID);
    }

    // ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá React ‚úÖ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ
    api.setMessageReaction("‚úÖ", event.messageID, () => {}, true);

  } catch (error) {
    console.error('Error fetching data:', error);
    api.sendMessage("An error occurred while fetching data. Please try again later.", event.threadID, event.messageID);
  }

  // ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá AI ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ö‡ßá‡¶ï‡¶ø‡¶Ç
  api.listenForReplies(event.threadID, event.messageID, async function (replyEvent) {
    const replyMessage = replyEvent.message.text.toLowerCase();

    // ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á‡ßü‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶•‡¶æ‡¶ï‡ßá (‡¶Ø‡ßá‡¶Æ‡¶® "‡¶∞‡ßã‡¶¨‡¶ü")
    if (replyMessage.includes("‡¶∞‡ßã‡¶¨‡¶ü")) {
      api.sendMessage("‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶Ü‡¶Æ‡¶ø ‡¶∞‡ßã‡¶¨‡¶ü, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø!", replyEvent.threadID, replyEvent.messageID);
    }
    // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶∞‡ßã ‡¶ï‡¶®‡ßç‡¶°‡¶ø‡¶∂‡¶® ‡¶è‡¶¨‡¶Ç ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã

    // ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡ßü, AI ‡¶§‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡¶¨‡ßá
    else {
      api.sendMessage("‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≤‡¶ø‡¶ñ‡ßá‡¶õ‡ßá‡¶®! ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶¨‡•§", replyEvent.threadID, replyEvent.messageID);
    }
  });
};
